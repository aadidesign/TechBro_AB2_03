<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>NeoMed Flux - Medical Records Management</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

    body {
      font-family: 'Inter', sans-serif;
    }

    .glassmorphism {
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .dark .glassmorphism {
      background: rgba(17, 24, 39, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.08);
    }

    .sapphire-teal-gradient {
      background: linear-gradient(135deg, #1143e3 0%, #38b2ac 100%);
    }
  </style>
</head>

<body class="bg-gray-50 dark:bg-gray-900 transition-colors duration-300">
  <!-- Main Content Area -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header with AI Summary and Action Button -->
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
      <div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Medical Records Management</h1>
        <div class="glassmorphism p-3 rounded-xl text-gray-700 dark:text-gray-200 text-sm max-w-2xl flex items-start space-x-2 animate-pulse">
          <svg class="w-5 h-5 text-blue-500 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
          </svg>
          <div>
            <span class="font-semibold text-blue-600 dark:text-blue-400">AI Insight:</span>
            <span>Analyzing patient records for trends and risk factors...</span>
          </div>
        </div>
      </div>

      <button type="button" class="group inline-flex items-center px-4 py-2 bg-gradient-to-r from-blue-600 to-teal-500 border border-transparent rounded-xl shadow-lg text-sm font-medium text-white hover:from-blue-700 hover:to-teal-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all hover:scale-105 active:scale-95" onclick="openModal()">
        <svg class="w-5 h-5 mr-2 group-hover:animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
        Add New Patient
      </button>
    </div>

    <!-- Smart Search Bar -->
    <div class="mb-8">
      <div class="relative glassmorphism rounded-xl overflow-hidden shadow-lg">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg class="h-5 w-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        <input type="text" id="searchInput" class="block w-full pl-10 pr-3 py-4 bg-transparent border-0 focus:ring-2 focus:ring-cyan-300 text-gray-900 dark:text-white placeholder-gray-500 focus:outline-none" placeholder="Search by patient name, age, or gender..." oninput="filterPatients()" />
        <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
          <svg class="h-5 w-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
          </svg>
        </div>
      </div>
    </div>

    <!-- Quick Filters -->
    <div class="flex flex-wrap gap-3 mb-6">
      <button onclick="filterByStatus('all')" class="px-4 py-2 bg-blue-100 dark:bg-blue-900 dark:bg-opacity-30 text-blue-700 dark:text-blue-300 rounded-lg text-sm font-medium hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors filter-btn active">
        All
      </button>
      <button onclick="filterByStatus('male')" class="px-4 py-2 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors filter-btn">
        Male
      </button>
      <button onclick="filterByStatus('female')" class="px-4 py-2 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors filter-btn">
        Female
      </button>
      <button onclick="sortPatientsByAge()" class="ml-auto px-4 py-2 text-blue-600 dark:text-blue-400 text-sm font-medium flex items-center">
        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
        </svg>
        Sort by Age
      </button>
    </div>

    <!-- Patient Records Grid -->
    <div id="patientGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <!-- Patient cards will be dynamically inserted here -->
      <div class="glassmorphism p-6 rounded-2xl shadow-lg text-center flex items-center justify-center h-48 bg-gray-100 dark:bg-gray-800 dark:bg-opacity-30">
        <div class="text-gray-500 dark:text-gray-400">
          <svg class="w-12 h-12 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          <p>No patients found</p>
          <p class="text-sm">Click "Add New Patient" to get started</p>
        </div>
      </div>
    </div>

    <!-- Dynamic Health Charts -->
    <div class="mt-8">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Demographics Overview</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="glassmorphism p-6 rounded-2xl shadow-lg">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Age Distribution</h3>
          <div id="ageChart" class="h-40 bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center justify-center">
            <p class="text-gray-500 dark:text-gray-400">Chart will appear when patients are added</p>
          </div>
        </div>
        <div class="glassmorphism p-6 rounded-2xl shadow-lg">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Gender Ratio</h3>
          <div id="genderChart" class="h-40 bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center justify-center">
            <p class="text-gray-500 dark:text-gray-400">Chart will appear when patients are added</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Add Patient Modal -->
  <div id="addPatientModal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
    <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg w-full max-w-md relative z-10">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Add New Patient</h2>
        <button class="text-gray-700 dark:text-gray-300 text-2xl leading-none" onclick="closeModal()">&times;</button>
      </div>
      <form id="addPatientForm" onsubmit="addPatient(event)">
        <div class="mb-4">
          <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Patient Name</label>
          <input type="text" name="name" id="name" class="mt-1 block w-full border border-gray-300 dark:border-gray-700 rounded-md p-2 bg-gray-50 dark:bg-gray-700 dark:text-white" placeholder="Enter patient name" required>
        </div>
        <div class="mb-4">
          <label for="age" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Age</label>
          <input type="number" name="age" id="age" class="mt-1 block w-full border border-gray-300 dark:border-gray-700 rounded-md p-2 bg-gray-50 dark:bg-gray-700 dark:text-white" placeholder="Enter age" required min="0" max="120">
        </div>
        <div class="mb-4">
          <label for="gender" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Gender</label>
          <select name="gender" id="gender" class="mt-1 block w-full border border-gray-300 dark:border-gray-700 rounded-md p-2 bg-gray-50 dark:bg-gray-700 dark:text-white" required>
            <option value="">Select gender</option>
            <option value="male">Male</option>
            <option value="female">Female</option>
            <option value="other">Other</option>
          </select>
        </div>
        <div class="mb-4">
          <label for="contact" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Contact</label>
          <input type="text" name="contact" id="contact" class="mt-1 block w-full border border-gray-300 dark:border-gray-700 rounded-md p-2 bg-gray-50 dark:bg-gray-700 dark:text-white" placeholder="Enter contact information" required>
        </div>
        <div class="flex justify-end">
          <button type="submit" class="px-4 py-2 bg-gradient-to-r from-blue-600 to-teal-500 text-white rounded-lg shadow hover:from-blue-700 hover:to-teal-600 transition-all">
            Save Patient
          </button>
        </div>
      </form>
    </div>
    <!-- Modal Overlay -->
    <div class="fixed inset-0 bg-black opacity-50" onclick="closeModal()"></div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteModal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
    <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg w-full max-w-md relative z-10">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Confirm Deletion</h2>
        <button class="text-gray-700 dark:text-gray-300 text-2xl leading-none" onclick="closeDeleteModal()">&times;</button>
      </div>
      <p class="text-gray-700 dark:text-gray-300 mb-4">Are you sure you want to delete this patient record? This action cannot be undone.</p>
      <div class="flex justify-end space-x-2">
        <button class="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-all" onclick="closeDeleteModal()">
          Cancel
        </button>
        <button id="confirmDelete" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-all">
          Delete
        </button>
      </div>
    </div>
    <!-- Modal Overlay -->
    <div class="fixed inset-0 bg-black opacity-50" onclick="closeDeleteModal()"></div>
  </div>

  <script>
    // Global variables
    let patients = [];
    let currentFilter = 'all';
    let currentSort = 'none';
    let patientToDelete = null;

    // DOM ready function
    document.addEventListener('DOMContentLoaded', function () {
      fetchPatients();
    });

    // Modal functions
    function openModal() {
      document.getElementById('addPatientModal').classList.remove('hidden');
    }

    function closeModal() {
      document.getElementById('addPatientModal').classList.add('hidden');
      document.getElementById('addPatientForm').reset();
    }

    function openDeleteModal(patientId) {
      patientToDelete = patientId;
      document.getElementById('deleteModal').classList.remove('hidden');
      document.getElementById('confirmDelete').onclick = function () {
        deletePatient(patientToDelete);
      };
    }

    function closeDeleteModal() {
      document.getElementById('deleteModal').classList.add('hidden');
      patientToDelete = null;
    }

    // Fetch patients from the server
    async function fetchPatients() {
      try {
        const response = await fetch('/patient/get'); // Replace with your API endpoint
        if (!response.ok) {
          throw new Error('Failed to fetch patients');
        }
        patients = await response.json();
        renderPatients();
        updateCharts();
      } catch (error) {
        console.error('Error fetching patients:', error);
        // Show error message to user
      }
    }

    // Add a new patient
    async function addPatient(event) {
      event.preventDefault();

      const form = document.getElementById('addPatientForm');
      const formData = new FormData(form);
      console.log(formData);

      const newPatient = {
        "name": formData.get('name'),
        "age": parseInt(formData.get('age')),
        "gender": formData.get('gender'),
        "contact": formData.get('contact')
      };

      try {
        const response = await fetch('/patient/add', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(newPatient)
        });
        
        

        if (!response.ok) {
          throw new Error('Failed to add patient');
        }

        const addedPatient = await response.json();
        patients.push(addedPatient);
        closeModal();
        renderPatients();
        updateCharts();

        // Show success notification
        showNotification('Patient added successfully');
      } catch (error) {
        console.error('Error adding patient:', error);
        // Show error message to user
      }
    }

    // Delete a patient
    async function deletePatient(patientId) {
      try {
        const response = await fetch(`/patient/${patientId}`, {
          method: 'DELETE'
        });

        if (!response.ok) {
          throw new Error('Failed to delete patient');
        }

        patients = patients.filter(p => p.id !== patientId);
        closeDeleteModal();
        renderPatients();
        updateCharts();

        // Show success notification
        showNotification('Patient deleted successfully');
      } catch (error) {
        console.error('Error deleting patient:', error);
        // Show error message to user
      }
    }

    // Render patients to the grid
    function renderPatients() {
      const grid = document.getElementById('patientGrid');
      grid.innerHTML = '';

      // Filter patients based on current filter
      let filteredPatients = patients;
      if (currentFilter !== 'all') {
        filteredPatients = patients.filter(p => p.gender === currentFilter);
      }

      // Sort patients if needed
      if (currentSort === 'age') {
        filteredPatients = [...filteredPatients].sort((a, b) => a.age - b.age);
      }

      // Search filter
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      if (searchTerm) {
        filteredPatients = filteredPatients.filter(p =>
          p.name.toLowerCase().includes(searchTerm) ||
          p.age.toString().includes(searchTerm) ||
          p.gender.toLowerCase().includes(searchTerm)
        );
      }

      if (filteredPatients.length === 0) {
        grid.innerHTML = `
          <div class="glassmorphism p-6 rounded-2xl shadow-lg text-center flex items-center justify-center h-48 col-span-full">
            <div class="text-gray-500 dark:text-gray-400">
              <svg class="w-12 h-12 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M12 12h.01M12 12h.01" />
              </svg>
              <p>No patients found</p>
              <p class="text-sm mt-1">Try changing your search or filters</p>
            </div>
          </div>
        `;
        return;
      }

      // Create patient cards
      filteredPatients.forEach(patient => {
        const card = document.createElement('div');
        card.className = 'glassmorphism p-6 rounded-2xl shadow-lg hover:shadow-xl transition-shadow';
        card.innerHTML = `
          <div class="flex items-center justify-between mb-4">
            <div class="text-lg font-semibold text-gray-900 dark:text-white">${patient.name}</div>
            <span class="px-2 py-1 text-xs font-semibold ${patient.gender === 'male' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' :
            patient.gender === 'female' ? 'bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300' :
              'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300'
          } rounded-full">
              ${patient.gender.charAt(0).toUpperCase() + patient.gender.slice(1)}
            </span>
          </div>
          <div class="text-sm text-gray-600 dark:text-gray-400 mb-4">
            <p><strong>Age:</strong> ${patient.age}</p>
            <p><strong>Contact:</strong> ${patient.contact}</p>
            <p><strong>ID:</strong> #${patient.id}</p>
          </div>
          <div class="flex space-x-2">
            <button class="group inline-flex items-center px-3 py-1 bg-gradient-to-r from-green-400 to-blue-500 border border-transparent rounded-full shadow-lg text-xs font-medium text-white hover:from-green-500 hover:to-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-400 transition-all hover:scale-105 active:scale-95" onclick="window.location.href='/AI?patientId=${patient.id}'">
              <svg class="w-4 h-4 mr-1 group-hover:animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
              Show AI Suggestion
            </button>
            <button onclick="openDeleteModal(${patient.id})" class="group inline-flex items-center px-3 py-1 bg-gradient-to-r from-red-500 to-pink-500 border border-transparent rounded-full shadow-lg text-xs font-medium text-white hover:from-red-600 hover:to-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-all hover:scale-105 active:scale-95">
              <svg class="w-4 h-4 mr-1 group-hover:animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01M12 5a7 7 0 110 14 7 7 0 010-14z" />
              </svg>
              Delete
            </button>
          </div>
        `;
        grid.appendChild(card);
      });
    }

    // Filter patients by status
    function filterByStatus(status) {
      currentFilter = status;

      // Update active button styling
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('bg-blue-100', 'dark:bg-blue-900', 'text-blue-700', 'dark:text-blue-300');
        btn.classList.add('bg-gray-100', 'dark:bg-gray-800', 'text-gray-700', 'dark:text-gray-300');
      });

      event.target.classList.remove('bg-gray-100', 'dark:bg-gray-800', 'text-gray-700', 'dark:text-gray-300');
      event.target.classList.add('bg-blue-100', 'dark:bg-blue-900', 'text-blue-700', 'dark:text-blue-300');

      renderPatients();
    }

    // Sort patients by age
    function sortPatientsByAge() {
      currentSort = currentSort === 'age' ? 'none' : 'age';
      renderPatients();
    }

    // Search filtering
    function filterPatients() {
      renderPatients();
    }

    // Update charts based on patient data
    function updateCharts() {
      const ageChart = document.getElementById('ageChart');
      const genderChart = document.getElementById('genderChart');

      if (patients.length === 0) {
        ageChart.innerHTML = '<p class="text-gray-500 dark:text-gray-400">Chart will appear when patients are added</p>';
        genderChart.innerHTML = '<p class="text-gray-500 dark:text-gray-400">Chart will appear when patients are added</p>';
        return;
      }

      // Create simple bar chart for age groups
      const ageGroups = {
        '0-18': 0,
        '19-35': 0,
        '36-50': 0,
        '51+': 0
      };

      patients.forEach(patient => {
        if (patient.age <= 18) ageGroups['0-18']++;
        else if (patient.age <= 35) ageGroups['19-35']++;
        else if (patient.age <= 50) ageGroups['36-50']++;
        else ageGroups['51+']++;
      });

      // Simple representation
      ageChart.innerHTML = `
        <div class="flex h-full items-end justify-around">
          ${Object.entries(ageGroups).map(([group, count]) => {
        const percentage = (count / patients.length) * 100;
        return `
              <div class="flex flex-col items-center">
                <div class="bg-blue-500 dark:bg-blue-600 w-10 rounded-t-lg" 
                  style="height: ${Math.max(percentage, 5)}%"></div>
                <div class="text-xs mt-1 text-gray-700 dark:text-gray-300">${group}</div>
                <div class="text-xs text-gray-500 dark:text-gray-400">${count}</div>
              </div>
            `;
      }).join('')}
        </div>
      `;

      // Gender chart
      const genderCounts = {
        male: patients.filter(p => p.gender === 'male').length,
        female: patients.filter(p => p.gender === 'female').length,
        other: patients.filter(p => p.gender === 'other').length
      };

      genderChart.innerHTML = `
        <div class="flex h-full items-center justify-center gap-4">
          <div class="h-32 w-32 relative">
            <svg viewBox="0 0 36 36" class="h-full w-full">
              <!-- Male segment -->
              <path class="fill-blue-500 dark:fill-blue-600" 
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                stroke-width="2"
                stroke-dasharray="${(genderCounts.male / patients.length) * 100}, 100"
                stroke-dashoffset="25" />
              <!-- Female segment -->
              <path class="fill-pink-500 dark:fill-pink-600" 
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                stroke-width="2"
                stroke-dasharray="${(genderCounts.female / patients.length) * 100}, 100"
                stroke-dashoffset="${25 - ((genderCounts.male / patients.length) * 100)}" />
              <!-- Other segment -->
              <path class="fill-purple-500 dark:fill-purple-600" 
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                stroke-width="2"
                stroke-dasharray="${(genderCounts.other / patients.length) * 100}, 100"
                stroke-dashoffset="${25 - ((genderCounts.male / patients.length) * 100) - ((genderCounts.female / patients.length) * 100)}" />
            </svg>
          </div>
          <div class="text-sm text-gray-700 dark:text-gray-300">
            <div class="flex items-center mb-1">
              <div class="w-3 h-3 rounded-full bg-blue-500 dark:bg-blue-600 mr-2"></div>
              <span>Male: ${genderCounts.male} (${Math.round((genderCounts.male / patients.length) * 100)}%)</span>
            </div>
            <div class="flex items-center mb-1">
              <div class="w-3 h-3 rounded-full bg-pink-500 dark:bg-pink-600 mr-2"></div>
              <span>Female: ${genderCounts.female} (${Math.round((genderCounts.female / patients.length) * 100)}%)</span>
            </div>
            <div class="flex items-center">
              <div class="w-3 h-3 rounded-full bg-purple-500 dark:bg-purple-600 mr-2"></div>
              <span>Other: ${genderCounts.other} (${Math.round((genderCounts.other / patients.length) * 100)}%)</span>
            </div>
          </div>
        </div>
      `;
    }

    // Show notification
    function showNotification(message) {
      const notification = document.createElement('div');
      notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg transform transition-all duration-500 opacity-0 translate-y-2';
      notification.textContent = message;
      document.body.appendChild(notification);

      // Animate in
      setTimeout(() => {
        notification.classList.remove('opacity-0', 'translate-y-2');
      }, 100);

      // Animate out
      setTimeout(() => {
        notification.classList.add('opacity-0', 'translate-y-2');
        setTimeout(() => {
          notification.remove();
        }, 500);
      }, 3000);
    }
  </script>
</body>
</html>